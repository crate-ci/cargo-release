[workspace]
resolver = "2"

[workspace.package]
repository = "https://github.com/crate-ci/cargo-release"
license = "MIT OR Apache-2.0"
edition = "2021"
rust-version = "1.80"  # MSRV
include = [
  "build.rs",
  "src/**/*",
  "Cargo.toml",
  "Cargo.lock",
  "LICENSE*",
  "README.md",
  "benches/**/*",
  "examples/**/*"
]

[workspace.lints.rust]
rust_2018_idioms = { level = "warn", priority = -1 }
unreachable_pub = "warn"
unsafe_op_in_unsafe_fn = "warn"
unused_lifetimes = "warn"
unused_macro_rules = "warn"
unused_qualifications = "warn"

[workspace.lints.clippy]
bool_assert_comparison = "allow"
branches_sharing_code = "allow"
checked_conversions = "warn"
collapsible_else_if = "allow"
create_dir = "warn"
dbg_macro = "warn"
debug_assert_with_mut_call = "warn"
doc_markdown = "warn"
empty_enum = "warn"
enum_glob_use = "warn"
expl_impl_clone_on_copy = "warn"
explicit_deref_methods = "warn"
explicit_into_iter_loop = "warn"
fallible_impl_from = "warn"
filter_map_next = "warn"
flat_map_option = "warn"
float_cmp_const = "warn"
fn_params_excessive_bools = "warn"
from_iter_instead_of_collect = "warn"
if_same_then_else = "allow"
implicit_clone = "warn"
imprecise_flops = "warn"
inconsistent_struct_constructor = "warn"
inefficient_to_string = "warn"
infinite_loop = "warn"
invalid_upcast_comparisons = "warn"
large_digit_groups = "warn"
large_stack_arrays = "warn"
large_types_passed_by_value = "warn"
let_and_return = "allow"  # sometimes good to name what you are returning
linkedlist = "warn"
lossy_float_literal = "warn"
macro_use_imports = "warn"
mem_forget = "warn"
mutex_integer = "warn"
needless_continue = "warn"
needless_for_each = "warn"
negative_feature_names = "warn"
path_buf_push_overwrite = "warn"
ptr_as_ptr = "warn"
rc_mutex = "warn"
redundant_feature_names = "warn"
ref_option_ref = "warn"
rest_pat_in_fully_bound_structs = "warn"
same_functions_in_if_condition = "warn"
self_named_module_files = "warn"
semicolon_if_nothing_returned = "warn"
str_to_string = "warn"
string_add = "warn"
string_add_assign = "warn"
string_lit_as_bytes = "warn"
string_to_string = "warn"
todo = "warn"
trait_duplication_in_bounds = "warn"
uninlined_format_args = "warn"
verbose_file_reads = "warn"
wildcard_imports = "warn"
zero_sized_map_values = "warn"

[package]
name = "cargo-release"
description = "Cargo subcommand for you to smooth your release process."
version = "0.25.13"
readme = "README.md"
categories = ["development-tools::cargo-plugins"]
keywords = ["cargo"]
repository.workspace = true
license.workspace = true
edition.workspace = true
rust-version.workspace = true
include.workspace = true

[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docsrs"]

[package.metadata.release]
pre-release-replacements = [
  {file="README.md", search="Current release: [a-z0-9\\.-]+", replace="Current release: {{version}}"} ,
  {file="CHANGELOG.md", search="Unreleased", replace="{{version}}", min=1},
  {file="CHANGELOG.md", search="\\.\\.\\.HEAD", replace="...{{tag_name}}", exactly=1},
  {file="CHANGELOG.md", search="ReleaseDate", replace="{{date}}", min=1},
  {file="CHANGELOG.md", search="<!-- next-header -->", replace="<!-- next-header -->\n## [Unreleased] - ReleaseDate\n", exactly=1},
  {file="CHANGELOG.md", search="<!-- next-url -->", replace="<!-- next-url -->\n[Unreleased]: https://github.com/crate-ci/cargo-release/compare/{{tag_name}}...HEAD", exactly=1},
]

[features]
# Enabling `vendored-openssl` for `crates-index`
#
# crates-index enables git2/https by default, which in turns enable openssl-sys,
# openssl-probe and libgit2-sys/https (which also pulls on openssl-sys).
#
# Thus, we also need to enable git2/vendored-openssl here to build vendored
# version of openssl in additional to vendored-libgit2 so that `cargo-release`
# can be built without having to install libgit2 or openssl on the system and
# the binary can be run everywhere.
default = ["vendored-libgit2", "vendored-openssl"]
vendored-libgit2 = ["git2/vendored-libgit2"]
vendored-openssl = ["git2/vendored-openssl"]

[dependencies]
cargo_metadata = "0.18"
# Use this with default-features set to "true" (implicitly) so that reqwest,
# a transitive dependency, is compiled with support for both webpki
# certificates AND native certificates. We want support for both to be
# present, and then to let the user _select_ through configuration which
# one they want to be used.
tame-index = { version = "0.14", features = ["sparse", "native-certs"] }
git2 = { version = "0.19.0", default-features = false }
toml_edit = { version = "0.22.12", features = ["serde"] }
toml = "0.8.12"
serde = { version = "1.0", features = ["derive"] }
semver = "1.0"
quick-error = "2.0"
regex = "1.10"
bstr = "1.9.1"
maplit = "1.0"
indexmap = "2.2"
time = { version = "0.3", features = ["formatting", "macros"] }
dirs-next = "2.0"
ignore = "0.4"
itertools = "0.13"
once_cell = "1.19.0"
clap = { version = "4.5.4", features = ["derive", "wrap_help"] }
clap-cargo = { version = "0.14.0", features = ["cargo_metadata"] }
log = "0.4"
env_logger = "0.11"
globset = { version = "0.4.14", default-features = false }
dunce = "1.0.4"
trycmd = "0.15.1"
anyhow = "1.0.82"
git-conventional = "0.12.6"
similar = "2.5"
anstream = "0.6.14"
anstyle = "1.0.7"

[dev-dependencies]
assert_fs = "1.1"
predicates = "3.1"
snapbox = "0.6.16"
cargo-test-support = "0.5"

[profile.release]
panic = "abort"
codegen-units = 1
lto = true

[lints]
workspace = true
